#include <string>
#include <vector>
#include <utility>
#include <map>
#include <set>
#include <queue>
#include <algorithm>
#include <iostream>
using namespace std;

void dfs(queue<pair<int, int>>& pos_list, int& total_sum, vector<string>& maps, set<pair<int, int>>& check)
{
    while (!pos_list.empty())
    {
        auto i = pos_list.front().first;
        auto j = pos_list.front().second;
        pos_list.pop();
        if (check.find({ i,j }) == check.end() && maps[i][j] != 'X')
        {
            total_sum += (maps[i][j] != 'X') ? maps[i][j] - '0' : 0;
            check.insert({ i,j });
            char n1 = [&]() {try { return maps.at(i + 1).at(j); } catch (...) { return 'X'; }}();
            char n2 = [&]() {try { return maps.at(i - 1).at(j); } catch (...) { return 'X'; }}();
            char n3 = [&]() {try { return maps.at(i).at(j + 1); } catch (...) { return 'X'; }}();
            char n4 = [&]() {try { return maps.at(i).at(j - 1); } catch (...) { return 'X'; }}();
            if (n1 != 'X') {pos_list.push({ i + 1, j }); }
            if (n2 != 'X') {pos_list.push({ i - 1, j }); }
            if (n3 != 'X') {pos_list.push({ i, j + 1 }); }
            if (n4 != 'X') {pos_list.push({ i, j - 1 }); }
            dfs(pos_list, total_sum, maps, check);
        }
    }
}

vector<int> solution(vector<string> maps) {
    vector<int> answer;
    set<pair<int, int>> vnode_list;
    for (auto i = 0; i < maps.size(); ++i)
    {
        for (auto j = 0; j < maps[i].size(); ++j)
        {
            int total = 0;
            queue<pair<int, int>> que_list;
            que_list.push({ i, j });
            if (vnode_list.find({ i,j }) == vnode_list.end())
            {
                dfs(que_list, total, maps, vnode_list);
            }
            if(total > 0)
            answer.emplace_back(total);
        }
    }
    if(answer.empty()) return {-1};
    sort(answer.begin(), answer.end());
    return answer;
}
